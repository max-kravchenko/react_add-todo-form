{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","completed","title","classNames","TodoList","todos","map","getUser","userId","usersFromServer","find","onlySpaces","todoTitle","test","App","useState","todosList","setTodos","newTitle","setTitle","selectedUserId","setselectedUserId","titleError","setTitleError","userError","setUserIdError","action","method","onSubmit","event","preventDefault","prevTodos","reduce","idA","idB","Math","max","type","placeholder","value","onChange","target","match","Number","disabled","trim","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f6a3726.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const {\n    email,\n    name,\n  } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id, completed, title, user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames('TodoInfo',\n        { 'TodoInfo--completed': completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nfunction onlySpaces(todoTitle: string): boolean {\n  return /^\\s*$/.test(todoTitle);\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App = () => {\n  const [todosList, setTodos] = useState<Todo[]>(todos);\n  const [newTitle, setTitle] = useState('');\n  const [selectedUserId, setselectedUserId] = useState(0);\n  const [titleError, setTitleError] = useState(false);\n  const [userError, setUserIdError] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => {\n          event.preventDefault();\n\n          if (onlySpaces(newTitle)) {\n            setTitleError(true);\n          }\n\n          if (!selectedUserId) {\n            setUserIdError(true);\n          }\n\n          if (titleError || onlySpaces(newTitle) || !selectedUserId) {\n            return;\n          }\n\n          setTodos((prevTodos) => {\n            return [\n              ...prevTodos,\n              {\n                title: newTitle,\n                userId: selectedUserId,\n                completed: false,\n                user: getUser(selectedUserId),\n                id: prevTodos\n                  .map(({ id }) => id)\n                  .reduce((idA, idB) => Math.max(idA, idB), 0) + 1,\n              },\n            ];\n          });\n          setTitle('');\n          setselectedUserId(0);\n        }}\n      >\n\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={newTitle}\n              onChange={(event) => {\n                setTitle(event.target.value);\n                if (event.target.value.match(/^[\\sа-яіїєa-z0-9]+$/i)) {\n                  setTitleError(false);\n                } else {\n                  setTitleError(true);\n                }\n              }}\n            />\n            {titleError\n              && (\n                <>\n                  <span className=\"error\">Please enter a title</span>\n                  <span className=\"error_extension\">\n                    {' '}\n                    Title should include UA or EN letters,\n                    numbers and spaces.\n                  </span>\n                </>\n              )}\n\n          </label>\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              value={selectedUserId}\n              data-cy=\"userSelect\"\n              onChange={(event) => {\n                setUserIdError(false);\n                setselectedUserId(Number(event.target.value));\n              }}\n            >\n              <option value=\"0\" disabled>\n                Choose a user\n              </option>\n              {usersFromServer.map((user) => (\n                <option\n                  key={user.id}\n                  value={user.id}\n                >\n                  {user.name.trim()}\n                </option>\n              ))}\n\n            </select>\n            {userError\n              && <span className=\"error\">Please choose a user</span>}\n\n          </label>\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todosList} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}